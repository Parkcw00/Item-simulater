// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Items {
  itemId    Int      @id @default(autoincrement()) @map("itemId")

  // 아이템 이름(중복될 수 없음 유니크)
  name     String   @unique @map("name")

  // 아이템 공격력 (방어구일시 NULL값이 존재할 수 있음)
  atk  Int?   @map("atk")
  
  // 아이템 방어력 (무기일시 NULL값이 존재할 수 있음)
  def Int?  @map("def")

  // 아이템 추가체력 (무기일시 NULL값이 존재할 수 있음)
  hp Int?  @map("hp")

  price Int @map("price")
 
  // 아이템 생성일자
  createdAt DateTime @default(now()) @map("createdAt")

  // 아이템 업데이트 일자
  updatedAt DateTime @updatedAt @map("updatedAt")

  @@map("Items")
}

model Accounts {
  accountId    Int      @id @default(autoincrement()) @map("accountId")

  // 유저의 이메일은 중복될 수 없음
  email  String   @unique @map("email")

  // 유저의 패스워드
  password  String   @map("password")

  // 계정 생성일자
  createdAt DateTime @default(now()) @map("createdAt")

  // 계정 수정일자
  updatedAt DateTime @updatedAt @map("updatedAt")

  // 하나의 계정은 캐릭터를 여러개 보유할 수 있다. 즉 계정 1: 캐릭터N 의 관계이다
  characters Characters[]
  
  // 하나의 계정은 하나의 자세한 계정정보를 보유할 수 있다. 즉 계정 1: 자세한 계정정보 1 의 관계이다.
  accountInfos AccountInfos?
  

  @@map("Accounts")
}

model AccountInfos {
  accountInfoId   Int      @id @default(autoincrement()) @map("accountInfoId")
  accountId       Int      @unique @map("accountId") // 사용자(Users) 테이블을 참조하는 외래키
  name         String   @map("name")
  age          Int?     @map("age")
  gender       String   @map("gender")
  profileImage String?  @map("profileImage")
  createdAt    DateTime @default(now()) @map("createdAt")
  updatedAt    DateTime @updatedAt @map("updatedAt")

  
  account Accounts @relation(fields: [accountId], references: [accountId], onDelete: Cascade)

  @@map("AccountInfos")
}

model Characters {
  characterId    Int      @id @default(autoincrement()) @map("characterId")

  // 하나의 계정은 여러개의 캐릭터를 가질 수 있다. 따라서 캐릭터의 계정 id는 중복될 수 있음!
  accountId Int @map("accountId")

  // 캐릭터의 이름은 중복될 수 없습니다!
  name     String   @unique @map("name")

  // 캐릭터의 직업
  class     String    @map("class")

  // 캐릭터의 공격력
  atk  Int  @default(100) @map("atk")

  // 캐릭터의 방어력
  def  Int  @default(20) @map("def")

  // 캐릭터의 체력
  hp  Int  @default(500) @map("hp")

    // 캐릭터가 가진 돈
  money  Int     @default(10000) @map("money")

  // 캐릭터 생성일자
  createdAt DateTime @default(now()) @map("createdAt")

  // 캐릭터 수정일자
  updatedAt DateTime @updatedAt @map("updatedAt")

  account  Accounts  @relation(fields: [accountId], references: [accountId], onDelete: Cascade)

  @@map("Characters")
}